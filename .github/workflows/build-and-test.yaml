name: Build and Test

on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK:
        description: 'Slack Notifier Webhook'
        required: true
jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-15]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    env:
      XCODE_VERSION: ${{ vars.XCODE_VERSION }}
      SIM_DEVICE_NAME: ${{ vars.SIM_DEVICE_NAME }}
      SIM_OS_VERSION: ${{ vars.SIM_OS_VERSION }}

    steps:
      # Clone the repo
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0

      # Get the architecture of the chip
      - name: Check chip architecture 
        run: echo "CHIP_TYPE=$(uname -m)" >> $GITHUB_ENV    

      # Set target Xcode version. For more details and options see:
      # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-15-Readme.md
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_$XCODE_VERSION.app && /usr/bin/xcodebuild -version
        
      # Run all tests
      - name: Run tests
        id: test_step
        run: |
          DEST="platform=iOS Simulator,name=${SIM_DEVICE_NAME},OS=${SIM_OS_VERSION}"
          echo "Running tests on $DEST"

          # Capture test output to a file
          mkdir -p test-output
          xcodebuild test \
          -scheme PingTestHost \
          -workspace SampleApps/Ping.xcworkspace \
          -configuration Debug \
          -destination "$DEST" \
          -derivedDataPath DerivedData \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults 2>&1 | tee test-output/xcodebuild.log | xcpretty
          
          exit ${PIPESTATUS[0]}

      # Read test output if tests failed
      - name: Process test output
        if: failure()
        id: process_logs
        run: |
          if [ -f test-output/xcodebuild.log ]; then
            # Get last 500 lines of log file to avoid message size limits
            tail -n 500 test-output/xcodebuild.log > test-output/failure.log
            echo "failure_logs=$(cat test-output/failure.log)" >> $GITHUB_OUTPUT
          fi

      # Publish test results
      - name: Publish test results
        uses: slidoapp/xcresulttool@v3.1.0
        with:
          title: "Test Results ${{ matrix.os }}"
          path: TestResults.xcresult
          show-passed-tests: false
          upload-bundles: never
        if: success() || failure()
 
      # Send slack notification with result status
      - uses: 8398a7/action-slack@v3
        with:
          mention: 'george.bafaloukas'
          if_mention: 'failure,cancelled'
          fields: repo,author,eventName,message,job,pullRequest,took
          status: ${{ job.status }}
          text: |
            ${{ job.status == 'failure' && format('Test Failure Logs:\n```{0}```', steps.process_logs.outputs.failure_logs) || '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
